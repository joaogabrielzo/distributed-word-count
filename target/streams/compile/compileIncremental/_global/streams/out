[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial source changes: [0m
[0m[[0m[0mdebug[0m] [0m[0m	removed:Set(/home/zo/dev/akka-practice/src/main/scala/DistributedWordCounter.scala, /home/zo/dev/akka-practice/src/main/scala/BankAccountActor.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	added: Set(/home/zo/dev/distributed-word-count/src/main/scala/DistributedWordCounter.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	modified: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated products: Set(/home/zo/dev/akka-practice/target/scala-2.12/classes/DistributedWordCounter$TaskManager.class, /home/zo/dev/akka-practice/target/scala-2.12/classes/DistributedWordCounter$WordCounterMaster$$anonfun$withChildren$1.class, /home/zo/dev/akka-practice/target/scala-2.12/classes/DistributedWordCounter$WordCounterMaster$$anonfun$receive$1.class, /home/zo/dev/akka-practice/target/scala-2.12/classes/DistributedWordCounter$WordCounterMaster$Initialize$.class, /home/zo/dev/akka-practice/target/scala-2.12/classes/DistributedWordCounter$TaskManager$requestTask$.class, /home/zo/dev/akka-practice/target/scala-2.12/classes/DistributedWordCounter$WordCounterMaster$WordCountReply.class, /home/zo/dev/akka-practice/target/scala-2.12/classes/DistributedWordCounter$TaskManager$$anonfun$receive$3.class, /home/zo/dev/akka-practice/target/scala-2.12/classes/DistributedWordCounter$.class, /home/zo/dev/akka-practice/target/scala-2.12/classes/DistributedWordCounter$WordCounterWorker$$anonfun$receive$2.class, /home/zo/dev/akka-practice/target/scala-2.12/classes/DistributedWordCounter$WordCounterMaster$WordCountTask$.class, /home/zo/dev/akka-practice/target/scala-2.12/classes/DistributedWordCounter$WordCounterMaster.class, /home/zo/dev/akka-practice/target/scala-2.12/classes/DistributedWordCounter$delayedInit$body.class, /home/zo/dev/akka-practice/target/scala-2.12/classes/DistributedWordCounter$WordCounterWorker.class, /home/zo/dev/akka-practice/target/scala-2.12/classes/DistributedWordCounter$WordCounterMaster$WordCountReply$.class, /home/zo/dev/akka-practice/target/scala-2.12/classes/DistributedWordCounter$WordCounterMaster$WordCountTask.class, /home/zo/dev/akka-practice/target/scala-2.12/classes/DistributedWordCounter.class, /home/zo/dev/akka-practice/target/scala-2.12/classes/DistributedWordCounter$TaskManager$requestTask.class, /home/zo/dev/akka-practice/target/scala-2.12/classes/DistributedWordCounter$WordCounterMaster$Initialize.class, /home/zo/dev/akka-practice/target/scala-2.12/classes/DistributedWordCounter$TaskManager$.class, /home/zo/dev/akka-practice/target/scala-2.12/classes/DistributedWordCounter$WordCounterMaster$.class)[0m
[0m[[0m[0mdebug[0m] [0m[0mExternal API changes: API Changes: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mModified binary dependencies: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial directly invalidated classes: Set(DistributedWordCounter.WordCounterMaster, DistributedWordCounter.TaskManager.requestTask, DistributedWordCounter.WordCounterMaster.WordCountTask, DistributedWordCounter.WordCounterWorker, DistributedWordCounter.WordCounterMaster.Initialize, DistributedWordCounter.WordCounterMaster.WordCountReply, DistributedWordCounter, DistributedWordCounter.TaskManager)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mSources indirectly invalidated by:[0m
[0m[[0m[0mdebug[0m] [0m[0m	product: Set(/home/zo/dev/akka-practice/src/main/scala/DistributedWordCounter.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	binary dep: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	external source: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated classes: Set(DistributedWordCounter.WordCounterMaster, DistributedWordCounter.TaskManager.requestTask, DistributedWordCounter.WordCounterMaster.WordCountTask, DistributedWordCounter.WordCounterWorker, DistributedWordCounter.WordCounterMaster.Initialize, DistributedWordCounter.WordCounterMaster.WordCountReply, DistributedWordCounter, DistributedWordCounter.TaskManager)[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated sources:Set(/home/zo/dev/distributed-word-count/src/main/scala/DistributedWordCounter.scala, /home/zo/dev/akka-practice/src/main/scala/DistributedWordCounter.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: DistributedWordCounter.WordCounterMaster, DistributedWordCounter.TaskManager.requestTask, DistributedWordCounter.WordCounterMaster.WordCountTask, DistributedWordCounter.WordCounterWorker, DistributedWordCounter.WordCounterMaster.Initialize, DistributedWordCounter.WordCounterMaster.WordCountReply, DistributedWordCounter, DistributedWordCounter.TaskManager[0m
[0m[[0m[0mdebug[0m] [0m[0mRecompiling all sources: number of invalidated sources > 50.0% of all sources[0m
[0m[[0m[0minfo[0m] [0m[0mCompiling 1 Scala source to /home/zo/dev/distributed-word-count/target/scala-2.12/classes ...[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting org.scala-sbt:compiler-bridge_2.12:1.3.4:compile for Scala 2.12.10[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting org.scala-sbt:compiler-bridge_2.12:1.3.4:compile for Scala 2.12.10[0m
[0m[[0m[0mdebug[0m] [0m[0m[zinc] Running cached compiler 68fa0c63 for Scala compiler version 2.12.10[0m
[0m[[0m[0mdebug[0m] [0m[0m[zinc] The Scala compiler is invoked with:[0m
[0m[[0m[0mdebug[0m] [0m[0m	-bootclasspath[0m
[0m[[0m[0mdebug[0m] [0m[0m	/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/resources.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/rt.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/sunrsasign.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/jsse.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/jce.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/charsets.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/jfr.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/classes:/home/zo/.sbt/boot/scala-2.12.10/lib/scala-library.jar[0m
[0m[[0m[0mdebug[0m] [0m[0m	-classpath[0m
[0m[[0m[0mdebug[0m] [0m[0m	/home/zo/dev/distributed-word-count/target/scala-2.12/classes:/home/zo/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scalactic/scalactic_2.12/3.0.5/scalactic_2.12-3.0.5.jar:/home/zo/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/modules/scala-java8-compat_2.12/0.8.0/scala-java8-compat_2.12-0.8.0.jar:/home/zo/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scalatest/scalatest_2.12/3.0.5/scalatest_2.12-3.0.5.jar:/home/zo/.sbt/boot/scala-2.12.10/lib/scala-reflect.jar:/home/zo/.cache/coursier/v1/https/repo1.maven.org/maven2/com/typesafe/config/1.3.2/config-1.3.2.jar:/home/zo/.cache/coursier/v1/https/repo1.maven.org/maven2/com/typesafe/akka/akka-actor_2.12/2.5.13/akka-actor_2.12-2.5.13.jar:/home/zo/.cache/coursier/v1/https/repo1.maven.org/maven2/com/typesafe/akka/akka-testkit_2.12/2.5.13/akka-testkit_2.12-2.5.13.jar:/home/zo/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/modules/scala-xml_2.12/1.0.6/scala-xml_2.12-1.0.6.jar[0m
[0m[[0m[0mdebug[0m] [0m[0mScala compilation took 2.425769789 s[0m
[0m[[0m[0mdebug[0m] [0m[0mDone compiling.[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from DistributedWordCounter.WordCounterMaster.WordCountTask...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: DistributedWordCounter.WordCounterMaster.WordCountTask[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(DistributedWordCounter.WordCounterMaster.WordCountTask)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(DistributedWordCounter.WordCounterMaster.WordCountTask,ModifiedNames(changes = UsedName(toString,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy$default$1,[Default]), UsedName(DistributedWordCounter;WordCounterMaster;WordCountTask;init;,[Default]), UsedName(productPrefix,[Default]), UsedName(notifyAll,[Default]), UsedName(canEqual,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(text,[Default]), UsedName(productIterator,[Default]), UsedName(unapply,[Default]), UsedName($init$,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(notify,[Default]), UsedName(curried,[Default]), UsedName($asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(asInstanceOf,[Default]), UsedName(apply,[Default]), UsedName(id,[Default]), UsedName(finalize,[Default]), UsedName(!=,[Default]), UsedName(getClass,[Default]), UsedName(WordCountTask,[Default]), UsedName(tupled,[Default]), UsedName(productArity,[Default]), UsedName(copy$default$2,[Default]), UsedName(copy,[Default]))) invalidates 1 classes due to The DistributedWordCounter.WordCounterMaster.WordCountTask has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(toString,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy$default$1,[Default]), UsedName(DistributedWordCounter;WordCounterMaster;WordCountTask;init;,[Default]), UsedName(productPrefix,[Default]), UsedName(notifyAll,[Default]), UsedName(canEqual,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(text,[Default]), UsedName(productIterator,[Default]), UsedName(unapply,[Default]), UsedName($init$,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(notify,[Default]), UsedName(curried,[Default]), UsedName($asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(asInstanceOf,[Default]), UsedName(apply,[Default]), UsedName(id,[Default]), UsedName(finalize,[Default]), UsedName(!=,[Default]), UsedName(getClass,[Default]), UsedName(WordCountTask,[Default]), UsedName(tupled,[Default]), UsedName(productArity,[Default]), UsedName(copy$default$2,[Default]), UsedName(copy,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(DistributedWordCounter.WordCounterMaster.WordCountTask)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from DistributedWordCounter.WordCounterWorker...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: DistributedWordCounter.WordCounterWorker[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(DistributedWordCounter.WordCounterWorker)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(DistributedWordCounter.WordCounterWorker,ModifiedNames(changes = UsedName(toString,[Default]), UsedName(ne,[Default]), UsedName(postStop,[Default]), UsedName(sender,[Default]), UsedName(DistributedWordCounter;WordCounterWorker;init;,[Default]), UsedName($isInstanceOf,[Default]), UsedName(preRestart,[Default]), UsedName(postRestart,[Default]), UsedName(unhandled,[Default]), UsedName(notifyAll,[Default]), UsedName(WordCounterWorker,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(context,[Implicit]), UsedName($init$,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(notify,[Default]), UsedName($asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName(##,[Default]), UsedName(aroundPreRestart,[Default]), UsedName(aroundPostRestart,[Default]), UsedName(self,[Implicit]), UsedName(asInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(receive,[Default]), UsedName(!=,[Default]), UsedName(getClass,[Default]), UsedName(Receive,[Default]), UsedName(preStart,[Default]), UsedName(aroundReceive,[Default]), UsedName(supervisorStrategy,[Default]), UsedName(aroundPostStop,[Default]), UsedName(aroundPreStart,[Default]))) invalidates 1 classes due to The DistributedWordCounter.WordCounterWorker has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(context,[Implicit]), UsedName(self,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(DistributedWordCounter.WordCounterWorker)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from DistributedWordCounter.WordCounterMaster.WordCountReply...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: DistributedWordCounter.WordCounterMaster.WordCountReply[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(DistributedWordCounter.WordCounterMaster.WordCountReply)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(DistributedWordCounter.WordCounterMaster.WordCountReply,ModifiedNames(changes = UsedName(toString,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy$default$1,[Default]), UsedName(productPrefix,[Default]), UsedName(notifyAll,[Default]), UsedName(canEqual,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(productIterator,[Default]), UsedName(unapply,[Default]), UsedName(DistributedWordCounter;WordCounterMaster;WordCountReply;init;,[Default]), UsedName($init$,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(notify,[Default]), UsedName(WordCountReply,[Default]), UsedName(curried,[Default]), UsedName($asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(asInstanceOf,[Default]), UsedName(apply,[Default]), UsedName(id,[Default]), UsedName(finalize,[Default]), UsedName(count,[Default]), UsedName(!=,[Default]), UsedName(getClass,[Default]), UsedName(tupled,[Default]), UsedName(productArity,[Default]), UsedName(copy$default$2,[Default]), UsedName(copy,[Default]))) invalidates 1 classes due to The DistributedWordCounter.WordCounterMaster.WordCountReply has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(toString,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy$default$1,[Default]), UsedName(productPrefix,[Default]), UsedName(notifyAll,[Default]), UsedName(canEqual,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(productIterator,[Default]), UsedName(unapply,[Default]), UsedName(DistributedWordCounter;WordCounterMaster;WordCountReply;init;,[Default]), UsedName($init$,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(notify,[Default]), UsedName(WordCountReply,[Default]), UsedName(curried,[Default]), UsedName($asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(asInstanceOf,[Default]), UsedName(apply,[Default]), UsedName(id,[Default]), UsedName(finalize,[Default]), UsedName(count,[Default]), UsedName(!=,[Default]), UsedName(getClass,[Default]), UsedName(tupled,[Default]), UsedName(productArity,[Default]), UsedName(copy$default$2,[Default]), UsedName(copy,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(DistributedWordCounter.WordCounterMaster.WordCountReply)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from DistributedWordCounter...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: DistributedWordCounter[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(DistributedWordCounter)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(DistributedWordCounter,ModifiedNames(changes = UsedName(toString,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(notifyAll,[Default]), UsedName(taskManager,[Default]), UsedName(WordCounterWorker,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName($init$,[Default]), UsedName(system,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(notify,[Default]), UsedName(executionStart,[Default]), UsedName($asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName(##,[Default]), UsedName(args,[Default]), UsedName(asInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(!=,[Default]), UsedName(getClass,[Default]), UsedName(TaskManager,[Default]), UsedName(DistributedWordCounter,[Default]), UsedName(delayedInit,[Default]), UsedName(WordCounterMaster,[Default]))) invalidates 1 classes due to The DistributedWordCounter has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(toString,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(notifyAll,[Default]), UsedName(taskManager,[Default]), UsedName(WordCounterWorker,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName($init$,[Default]), UsedName(system,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(notify,[Default]), UsedName(executionStart,[Default]), UsedName($asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName(##,[Default]), UsedName(args,[Default]), UsedName(asInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(!=,[Default]), UsedName(getClass,[Default]), UsedName(TaskManager,[Default]), UsedName(DistributedWordCounter,[Default]), UsedName(delayedInit,[Default]), UsedName(WordCounterMaster,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(DistributedWordCounter)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from exercises.DistributedWordCounter.WordCounterMaster...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: exercises.DistributedWordCounter.WordCounterMaster[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(exercises.DistributedWordCounter.WordCounterMaster)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(exercises.DistributedWordCounter.WordCounterMaster,ModifiedNames(changes = UsedName(toString,[Default]), UsedName(ne,[Default]), UsedName(postStop,[Default]), UsedName(sender,[Default]), UsedName($isInstanceOf,[Default]), UsedName(Initialize,[Default]), UsedName(preRestart,[Default]), UsedName(postRestart,[Default]), UsedName(unhandled,[Default]), UsedName(notifyAll,[Default]), UsedName(withChildren,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(context,[Implicit]), UsedName($init$,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(notify,[Default]), UsedName(WordCountReply,[Default]), UsedName($asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName(##,[Default]), UsedName(aroundPreRestart,[Default]), UsedName(aroundPostRestart,[Default]), UsedName(self,[Implicit]), UsedName(asInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(receive,[Default]), UsedName(!=,[Default]), UsedName(getClass,[Default]), UsedName(WordCountTask,[Default]), UsedName(Receive,[Default]), UsedName(exercises;DistributedWordCounter;WordCounterMaster;init;,[Default]), UsedName(preStart,[Default]), UsedName(aroundReceive,[Default]), UsedName(WordCounterMaster,[Default]), UsedName(supervisorStrategy,[Default]), UsedName(aroundPostStop,[Default]), UsedName(aroundPreStart,[Default]))) invalidates 1 classes due to The exercises.DistributedWordCounter.WordCounterMaster has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(context,[Implicit]), UsedName(self,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(exercises.DistributedWordCounter.WordCounterMaster)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from exercises.DistributedWordCounter.TaskManager.requestTask...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: exercises.DistributedWordCounter.TaskManager.requestTask[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(exercises.DistributedWordCounter.TaskManager.requestTask)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(exercises.DistributedWordCounter.TaskManager.requestTask,ModifiedNames(changes = UsedName(toString,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy$default$1,[Default]), UsedName(productPrefix,[Default]), UsedName(notifyAll,[Default]), UsedName(exercises;DistributedWordCounter;TaskManager;requestTask;init;,[Default]), UsedName(canEqual,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(productIterator,[Default]), UsedName(unapply,[Default]), UsedName($init$,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(notify,[Default]), UsedName(requestTask,[Default]), UsedName($asInstanceOf,[Default]), UsedName(nWorkers,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(asInstanceOf,[Default]), UsedName(apply,[Default]), UsedName(finalize,[Default]), UsedName(!=,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy$default$2,[Default]), UsedName(task,[Default]), UsedName(copy,[Default]))) invalidates 1 classes due to The exercises.DistributedWordCounter.TaskManager.requestTask has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(toString,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy$default$1,[Default]), UsedName(productPrefix,[Default]), UsedName(notifyAll,[Default]), UsedName(exercises;DistributedWordCounter;TaskManager;requestTask;init;,[Default]), UsedName(canEqual,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(productIterator,[Default]), UsedName(unapply,[Default]), UsedName($init$,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(notify,[Default]), UsedName(requestTask,[Default]), UsedName($asInstanceOf,[Default]), UsedName(nWorkers,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(asInstanceOf,[Default]), UsedName(apply,[Default]), UsedName(finalize,[Default]), UsedName(!=,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy$default$2,[Default]), UsedName(task,[Default]), UsedName(copy,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(exercises.DistributedWordCounter.TaskManager.requestTask)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from DistributedWordCounter.WordCounterMaster...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: DistributedWordCounter.WordCounterMaster[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(DistributedWordCounter.WordCounterMaster)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(DistributedWordCounter.WordCounterMaster,ModifiedNames(changes = UsedName(toString,[Default]), UsedName(ne,[Default]), UsedName(postStop,[Default]), UsedName(sender,[Default]), UsedName($isInstanceOf,[Default]), UsedName(Initialize,[Default]), UsedName(preRestart,[Default]), UsedName(postRestart,[Default]), UsedName(unhandled,[Default]), UsedName(notifyAll,[Default]), UsedName(withChildren,[Default]), UsedName(isInstanceOf,[Default]), UsedName(DistributedWordCounter;WordCounterMaster;init;,[Default]), UsedName(clone,[Default]), UsedName(context,[Implicit]), UsedName($init$,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(notify,[Default]), UsedName(WordCountReply,[Default]), UsedName($asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName(##,[Default]), UsedName(aroundPreRestart,[Default]), UsedName(aroundPostRestart,[Default]), UsedName(self,[Implicit]), UsedName(asInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(receive,[Default]), UsedName(!=,[Default]), UsedName(getClass,[Default]), UsedName(WordCountTask,[Default]), UsedName(Receive,[Default]), UsedName(preStart,[Default]), UsedName(aroundReceive,[Default]), UsedName(WordCounterMaster,[Default]), UsedName(supervisorStrategy,[Default]), UsedName(aroundPostStop,[Default]), UsedName(aroundPreStart,[Default]))) invalidates 1 classes due to The DistributedWordCounter.WordCounterMaster has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(context,[Implicit]), UsedName(self,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(DistributedWordCounter.WordCounterMaster)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from DistributedWordCounter.TaskManager...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: DistributedWordCounter.TaskManager[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(DistributedWordCounter.TaskManager)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(DistributedWordCounter.TaskManager,ModifiedNames(changes = UsedName(toString,[Default]), UsedName(ne,[Default]), UsedName(postStop,[Default]), UsedName(sender,[Default]), UsedName($isInstanceOf,[Default]), UsedName(preRestart,[Default]), UsedName(postRestart,[Default]), UsedName(unhandled,[Default]), UsedName(notifyAll,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(context,[Implicit]), UsedName($init$,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(notify,[Default]), UsedName(requestTask,[Default]), UsedName($asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName(##,[Default]), UsedName(aroundPreRestart,[Default]), UsedName(aroundPostRestart,[Default]), UsedName(self,[Implicit]), UsedName(asInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(receive,[Default]), UsedName(!=,[Default]), UsedName(getClass,[Default]), UsedName(TaskManager,[Default]), UsedName(Receive,[Default]), UsedName(preStart,[Default]), UsedName(DistributedWordCounter;TaskManager;init;,[Default]), UsedName(aroundReceive,[Default]), UsedName(supervisorStrategy,[Default]), UsedName(aroundPostStop,[Default]), UsedName(aroundPreStart,[Default]))) invalidates 1 classes due to The DistributedWordCounter.TaskManager has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(context,[Implicit]), UsedName(self,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(DistributedWordCounter.TaskManager)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from exercises.DistributedWordCounter.WordCounterMaster.WordCountTask...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: exercises.DistributedWordCounter.WordCounterMaster.WordCountTask[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(exercises.DistributedWordCounter.WordCounterMaster.WordCountTask)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(exercises.DistributedWordCounter.WordCounterMaster.WordCountTask,ModifiedNames(changes = UsedName(toString,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy$default$1,[Default]), UsedName(productPrefix,[Default]), UsedName(notifyAll,[Default]), UsedName(canEqual,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(text,[Default]), UsedName(productIterator,[Default]), UsedName(unapply,[Default]), UsedName($init$,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(notify,[Default]), UsedName(curried,[Default]), UsedName($asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(exercises;DistributedWordCounter;WordCounterMaster;WordCountTask;init;,[Default]), UsedName(asInstanceOf,[Default]), UsedName(apply,[Default]), UsedName(id,[Default]), UsedName(finalize,[Default]), UsedName(!=,[Default]), UsedName(getClass,[Default]), UsedName(WordCountTask,[Default]), UsedName(tupled,[Default]), UsedName(productArity,[Default]), UsedName(copy$default$2,[Default]), UsedName(copy,[Default]))) invalidates 1 classes due to The exercises.DistributedWordCounter.WordCounterMaster.WordCountTask has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(toString,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy$default$1,[Default]), UsedName(productPrefix,[Default]), UsedName(notifyAll,[Default]), UsedName(canEqual,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(text,[Default]), UsedName(productIterator,[Default]), UsedName(unapply,[Default]), UsedName($init$,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(notify,[Default]), UsedName(curried,[Default]), UsedName($asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(exercises;DistributedWordCounter;WordCounterMaster;WordCountTask;init;,[Default]), UsedName(asInstanceOf,[Default]), UsedName(apply,[Default]), UsedName(id,[Default]), UsedName(finalize,[Default]), UsedName(!=,[Default]), UsedName(getClass,[Default]), UsedName(WordCountTask,[Default]), UsedName(tupled,[Default]), UsedName(productArity,[Default]), UsedName(copy$default$2,[Default]), UsedName(copy,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(exercises.DistributedWordCounter.WordCounterMaster.WordCountTask)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from exercises.DistributedWordCounter.WordCounterWorker...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: exercises.DistributedWordCounter.WordCounterWorker[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(exercises.DistributedWordCounter.WordCounterWorker)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(exercises.DistributedWordCounter.WordCounterWorker,ModifiedNames(changes = UsedName(toString,[Default]), UsedName(ne,[Default]), UsedName(postStop,[Default]), UsedName(sender,[Default]), UsedName($isInstanceOf,[Default]), UsedName(preRestart,[Default]), UsedName(postRestart,[Default]), UsedName(unhandled,[Default]), UsedName(notifyAll,[Default]), UsedName(WordCounterWorker,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(context,[Implicit]), UsedName($init$,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(notify,[Default]), UsedName($asInstanceOf,[Default]), UsedName(exercises;DistributedWordCounter;WordCounterWorker;init;,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName(##,[Default]), UsedName(aroundPreRestart,[Default]), UsedName(aroundPostRestart,[Default]), UsedName(self,[Implicit]), UsedName(asInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(receive,[Default]), UsedName(!=,[Default]), UsedName(getClass,[Default]), UsedName(Receive,[Default]), UsedName(preStart,[Default]), UsedName(aroundReceive,[Default]), UsedName(supervisorStrategy,[Default]), UsedName(aroundPostStop,[Default]), UsedName(aroundPreStart,[Default]))) invalidates 1 classes due to The exercises.DistributedWordCounter.WordCounterWorker has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(context,[Implicit]), UsedName(self,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(exercises.DistributedWordCounter.WordCounterWorker)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from exercises.DistributedWordCounter...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: exercises.DistributedWordCounter[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(exercises.DistributedWordCounter)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(exercises.DistributedWordCounter,ModifiedNames(changes = UsedName(toString,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(notifyAll,[Default]), UsedName(taskManager,[Default]), UsedName(WordCounterWorker,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName($init$,[Default]), UsedName(system,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(notify,[Default]), UsedName(executionStart,[Default]), UsedName($asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName(##,[Default]), UsedName(args,[Default]), UsedName(asInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(!=,[Default]), UsedName(getClass,[Default]), UsedName(TaskManager,[Default]), UsedName(DistributedWordCounter,[Default]), UsedName(delayedInit,[Default]), UsedName(WordCounterMaster,[Default]))) invalidates 1 classes due to The exercises.DistributedWordCounter has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(toString,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(notifyAll,[Default]), UsedName(taskManager,[Default]), UsedName(WordCounterWorker,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(main,[Default]), UsedName($init$,[Default]), UsedName(system,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(notify,[Default]), UsedName(executionStart,[Default]), UsedName($asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName(##,[Default]), UsedName(args,[Default]), UsedName(asInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(!=,[Default]), UsedName(getClass,[Default]), UsedName(TaskManager,[Default]), UsedName(DistributedWordCounter,[Default]), UsedName(delayedInit,[Default]), UsedName(WordCounterMaster,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(exercises.DistributedWordCounter)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from DistributedWordCounter.WordCounterMaster.Initialize...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: DistributedWordCounter.WordCounterMaster.Initialize[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(DistributedWordCounter.WordCounterMaster.Initialize)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(DistributedWordCounter.WordCounterMaster.Initialize,ModifiedNames(changes = UsedName(toString,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(compose,[Default]), UsedName(copy$default$1,[Default]), UsedName(Initialize,[Default]), UsedName(productPrefix,[Default]), UsedName(notifyAll,[Default]), UsedName(canEqual,[Default]), UsedName(DistributedWordCounter;WordCounterMaster;Initialize;init;,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(productIterator,[Default]), UsedName(unapply,[Default]), UsedName($init$,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(notify,[Default]), UsedName($asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(asInstanceOf,[Default]), UsedName(apply,[Default]), UsedName(finalize,[Default]), UsedName(!=,[Default]), UsedName(getClass,[Default]), UsedName(nChildren,[Default]), UsedName(productArity,[Default]), UsedName(andThen,[Default]), UsedName(copy,[Default]))) invalidates 1 classes due to The DistributedWordCounter.WordCounterMaster.Initialize has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(toString,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(compose,[Default]), UsedName(copy$default$1,[Default]), UsedName(Initialize,[Default]), UsedName(productPrefix,[Default]), UsedName(notifyAll,[Default]), UsedName(canEqual,[Default]), UsedName(DistributedWordCounter;WordCounterMaster;Initialize;init;,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(productIterator,[Default]), UsedName(unapply,[Default]), UsedName($init$,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(notify,[Default]), UsedName($asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(asInstanceOf,[Default]), UsedName(apply,[Default]), UsedName(finalize,[Default]), UsedName(!=,[Default]), UsedName(getClass,[Default]), UsedName(nChildren,[Default]), UsedName(productArity,[Default]), UsedName(andThen,[Default]), UsedName(copy,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(DistributedWordCounter.WordCounterMaster.Initialize)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from exercises.DistributedWordCounter.WordCounterMaster.Initialize...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: exercises.DistributedWordCounter.WordCounterMaster.Initialize[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(exercises.DistributedWordCounter.WordCounterMaster.Initialize)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(exercises.DistributedWordCounter.WordCounterMaster.Initialize,ModifiedNames(changes = UsedName(toString,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(compose,[Default]), UsedName(copy$default$1,[Default]), UsedName(Initialize,[Default]), UsedName(productPrefix,[Default]), UsedName(notifyAll,[Default]), UsedName(canEqual,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(productIterator,[Default]), UsedName(unapply,[Default]), UsedName($init$,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(notify,[Default]), UsedName($asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(asInstanceOf,[Default]), UsedName(apply,[Default]), UsedName(finalize,[Default]), UsedName(!=,[Default]), UsedName(getClass,[Default]), UsedName(exercises;DistributedWordCounter;WordCounterMaster;Initialize;init;,[Default]), UsedName(nChildren,[Default]), UsedName(productArity,[Default]), UsedName(andThen,[Default]), UsedName(copy,[Default]))) invalidates 1 classes due to The exercises.DistributedWordCounter.WordCounterMaster.Initialize has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(toString,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(compose,[Default]), UsedName(copy$default$1,[Default]), UsedName(Initialize,[Default]), UsedName(productPrefix,[Default]), UsedName(notifyAll,[Default]), UsedName(canEqual,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(productIterator,[Default]), UsedName(unapply,[Default]), UsedName($init$,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(notify,[Default]), UsedName($asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(asInstanceOf,[Default]), UsedName(apply,[Default]), UsedName(finalize,[Default]), UsedName(!=,[Default]), UsedName(getClass,[Default]), UsedName(exercises;DistributedWordCounter;WordCounterMaster;Initialize;init;,[Default]), UsedName(nChildren,[Default]), UsedName(productArity,[Default]), UsedName(andThen,[Default]), UsedName(copy,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(exercises.DistributedWordCounter.WordCounterMaster.Initialize)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from DistributedWordCounter.TaskManager.requestTask...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: DistributedWordCounter.TaskManager.requestTask[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(DistributedWordCounter.TaskManager.requestTask)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(DistributedWordCounter.TaskManager.requestTask,ModifiedNames(changes = UsedName(toString,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy$default$1,[Default]), UsedName(productPrefix,[Default]), UsedName(notifyAll,[Default]), UsedName(canEqual,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(productIterator,[Default]), UsedName(unapply,[Default]), UsedName($init$,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(notify,[Default]), UsedName(requestTask,[Default]), UsedName(DistributedWordCounter;TaskManager;requestTask;init;,[Default]), UsedName($asInstanceOf,[Default]), UsedName(nWorkers,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(asInstanceOf,[Default]), UsedName(apply,[Default]), UsedName(finalize,[Default]), UsedName(!=,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy$default$2,[Default]), UsedName(task,[Default]), UsedName(copy,[Default]))) invalidates 1 classes due to The DistributedWordCounter.TaskManager.requestTask has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(toString,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy$default$1,[Default]), UsedName(productPrefix,[Default]), UsedName(notifyAll,[Default]), UsedName(canEqual,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(productIterator,[Default]), UsedName(unapply,[Default]), UsedName($init$,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(notify,[Default]), UsedName(requestTask,[Default]), UsedName(DistributedWordCounter;TaskManager;requestTask;init;,[Default]), UsedName($asInstanceOf,[Default]), UsedName(nWorkers,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(asInstanceOf,[Default]), UsedName(apply,[Default]), UsedName(finalize,[Default]), UsedName(!=,[Default]), UsedName(getClass,[Default]), UsedName(productArity,[Default]), UsedName(copy$default$2,[Default]), UsedName(task,[Default]), UsedName(copy,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(DistributedWordCounter.TaskManager.requestTask)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from exercises.DistributedWordCounter.WordCounterMaster.WordCountReply...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: exercises.DistributedWordCounter.WordCounterMaster.WordCountReply[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(exercises.DistributedWordCounter.WordCounterMaster.WordCountReply)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(exercises.DistributedWordCounter.WordCounterMaster.WordCountReply,ModifiedNames(changes = UsedName(toString,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy$default$1,[Default]), UsedName(productPrefix,[Default]), UsedName(notifyAll,[Default]), UsedName(canEqual,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(productIterator,[Default]), UsedName(unapply,[Default]), UsedName($init$,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(notify,[Default]), UsedName(WordCountReply,[Default]), UsedName(curried,[Default]), UsedName($asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(exercises;DistributedWordCounter;WordCounterMaster;WordCountReply;init;,[Default]), UsedName(asInstanceOf,[Default]), UsedName(apply,[Default]), UsedName(id,[Default]), UsedName(finalize,[Default]), UsedName(count,[Default]), UsedName(!=,[Default]), UsedName(getClass,[Default]), UsedName(tupled,[Default]), UsedName(productArity,[Default]), UsedName(copy$default$2,[Default]), UsedName(copy,[Default]))) invalidates 1 classes due to The exercises.DistributedWordCounter.WordCounterMaster.WordCountReply has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(toString,[Default]), UsedName(ne,[Default]), UsedName($isInstanceOf,[Default]), UsedName(copy$default$1,[Default]), UsedName(productPrefix,[Default]), UsedName(notifyAll,[Default]), UsedName(canEqual,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(productIterator,[Default]), UsedName(unapply,[Default]), UsedName($init$,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(notify,[Default]), UsedName(WordCountReply,[Default]), UsedName(curried,[Default]), UsedName($asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName(productElement,[Default]), UsedName(##,[Default]), UsedName(exercises;DistributedWordCounter;WordCounterMaster;WordCountReply;init;,[Default]), UsedName(asInstanceOf,[Default]), UsedName(apply,[Default]), UsedName(id,[Default]), UsedName(finalize,[Default]), UsedName(count,[Default]), UsedName(!=,[Default]), UsedName(getClass,[Default]), UsedName(tupled,[Default]), UsedName(productArity,[Default]), UsedName(copy$default$2,[Default]), UsedName(copy,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(exercises.DistributedWordCounter.WordCounterMaster.WordCountReply)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from exercises.DistributedWordCounter.TaskManager...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: exercises.DistributedWordCounter.TaskManager[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(exercises.DistributedWordCounter.TaskManager)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(exercises.DistributedWordCounter.TaskManager,ModifiedNames(changes = UsedName(toString,[Default]), UsedName(ne,[Default]), UsedName(postStop,[Default]), UsedName(sender,[Default]), UsedName($isInstanceOf,[Default]), UsedName(preRestart,[Default]), UsedName(postRestart,[Default]), UsedName(unhandled,[Default]), UsedName(notifyAll,[Default]), UsedName(isInstanceOf,[Default]), UsedName(clone,[Default]), UsedName(context,[Implicit]), UsedName($init$,[Default]), UsedName(==,[Default]), UsedName(hashCode,[Default]), UsedName(notify,[Default]), UsedName(requestTask,[Default]), UsedName($asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(wait,[Default]), UsedName(equals,[Default]), UsedName(##,[Default]), UsedName(aroundPreRestart,[Default]), UsedName(aroundPostRestart,[Default]), UsedName(self,[Implicit]), UsedName(asInstanceOf,[Default]), UsedName(finalize,[Default]), UsedName(receive,[Default]), UsedName(!=,[Default]), UsedName(getClass,[Default]), UsedName(TaskManager,[Default]), UsedName(Receive,[Default]), UsedName(preStart,[Default]), UsedName(exercises;DistributedWordCounter;TaskManager;init;,[Default]), UsedName(aroundReceive,[Default]), UsedName(supervisorStrategy,[Default]), UsedName(aroundPostStop,[Default]), UsedName(aroundPreStart,[Default]))) invalidates 1 classes due to The exercises.DistributedWordCounter.TaskManager has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(context,[Implicit]), UsedName(self,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(exercises.DistributedWordCounter.TaskManager)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mNew invalidations:[0m
[0m[[0m[0mdebug[0m] [0m[0m	Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: [0m
[0m[[0m[0mdebug[0m] [0m[0mPreviously invalidated, but (transitively) depend on new invalidations:[0m
[0m[[0m[0mdebug[0m] [0m[0m	Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNo classes were invalidated.[0m
